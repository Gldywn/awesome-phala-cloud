[
  {
    "id": "demap-defillama",
    "name": "DeMCP Defillama",
    "description": "A DeFiLlama MCP server deployed on Phala Cloud that enables AI agents to fetch real-time DeFi data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Leechael/awesome-phala-cloud/tree/main/prebuilt/demap-defilama",
    "author": "DeMCP",
    "cover": "mcp-defillama.png",
    "tags": ["MCP"]
  },
  {
    "id": "jupter-notebook",
    "name": "Jupyter Notebook",
    "description": "A Juypter Notebook MCP server deployed on Phala Cloud that allows your AI agents to execute code and interact with the notebook with your prompt.",
    "repo": "https://github.com/Leechael/awesome-phala-cloud/tree/main/prebuilt/jupter-notebook",
    "author": "Phala-Network",
    "cover": "mcp-jupyter.png",
    "tags": ["MCP"]
  },
  {
    "id": "context7-mcp",
    "name": "Context7 MCP",
    "description": "A Context7 MCP server deployed on Phala Cloud that enables AI agents to fetch real-time Context7 data, including protocol TVL (Total Value Locked), chain metrics, and token prices.",
    "repo": "https://github.com/Leechael/awesome-phala-cloud/tree/main/prebuilt/context7-mcp",
    "author": "Phala-Network",
    "cover": "mcp-context7.png",
    "tags": ["MCP"]
  },
  {
    "id": "mcp-server-fetch",
    "name": "MCP Server Fetch",
    "description": "A MCP server deployed on Phala Cloud that enables AI agents to fetch real-time data from a given URL.",
    "repo": "https://github.com/Leechael/mcp-servers/tree/main/src/fetch",
    "author": "Leechael",
    "cover": "mcp-fetch.png",
    "tags": ["MCP"]
  },
  {
    "id": "tor-hidden-service",
    "name": "TEE Tor Hidden Service",
    "description": "This docker compose example sets up a Tor hidden service and serves an nginx website from that.",
    "repo": "https://github.com/Dstack-TEE/dstack-examples/tree/main/tor-hidden-service",
    "author": "Dstack-TEE",
    "cover": "tor-hidden-service.png",
    "tags": ["Dstack"]
  },
  {
    "id": "lightclient",
    "name": "TEE Coprocessors in Dstack",
    "description": "Minimal docker file for using the Helios light client to provide a trustworthy view of the blockchain.",
    "repo": "https://github.com/Dstack-TEE/dstack-examples/tree/main/lightclient",
    "author": "Dstack-TEE",
    "cover": "lightclient.png",
    "envs": [{ "key": "ETH_RPC_URL", "required": true }],
    "tags": ["Dstack"]
  },
  {
    "id": "webshell",
    "name": "Webshell",
    "description": "This guide outlines the steps to set up and use a webshell with the ttyd service.",
    "repo": "https://github.com/Dstack-TEE/dstack-examples/tree/main/webshell",
    "author": "Dstack-TEE",
    "cover": "webshell.png",
    "tags": ["Dstack"]
  },
  {
    "id": "nextjs-starter",
    "name": "Next.js Starter",
    "description": "This is a template for developing a Next.js-based app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Phala-Network/phala-cloud-nextjs-starter",
    "author": "Phala-Network",
    "cover": "nextjs-starter.png",
    "tags": ["Starter"]
  },
  {
    "id": "python-starter",
    "name": "Python Starter",
    "description": "This is a template for developing a FastAPI-based app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Phala-Network/phala-cloud-python-starter",
    "author": "Phala-Network",
    "cover": "python-starter.png",
    "tags": ["Starter"]
  },
  {
    "id": "bun-starter",
    "name": "Bun + TypeScript Starter",
    "description": "This is a template for developing a Bun-based app with boilerplate code targeting deployment on Phala Cloud and DStack. It includes the SDK by default to make integration with TEE features easier.",
    "repo": "https://github.com/Phala-Network/phala-cloud-bun-starter",
    "author": "Phala-Network",
    "cover": "bun-starter.png",
    "tags": ["Starter"]
  },
  {
    "id": "armor-crypto",
    "name": "Armor Crypto",
    "description": "A single source for integrating AI Agents with the Crypto ecosystem. This includes Wallet creation and management, swaps, transfers, event-based trades like DCA, stop loss and take profit, and much more. The Armor MCP supports Solana in Alpha and, when in beta, will support more than a dozen blockchains, including Ethereum. Base, Avalanche, Bitcoin, Sui, Berachain, megaETH, Optimism, Ton, BNB, and Arbitrum, among others. Using Armor's MCP you can bring all of crypto into your AI Agent with unified logic and a complete set of tools.",
    "repo": "https://github.com/HashWarlock/armor-crypto-mcp",
    "author": "Armor Crypto",
    "cover": "armor-crypto.png",
    "tags": ["MCP"]
  },
  {
    "id": "coinbase-x402-tee",
    "name": "Coinbase x402 TEE",
    "description": "a demonstration of a Node.js Express server that integrates TEE and the [X402 payment protocol](https://www.x402.org/) for monetizing API endpoints.",
    "repo": "https://github.com/HashWarlock/402-api-test/tree/phala-cloud",
    "author": "Phala-Network",
    "cover": "coinbase-x402.png",
    "envs": [
      {
        "key": "WALLET_ADDRESS",
        "required": true
      },
      {
        "key": "OPENAI_API_KEY",
        "required": true
      },
      {
        "key": "DSTACK_SECRET_SALT",
        "required": true
      }
    ],
    "tags": ["Starter"]
  }
]